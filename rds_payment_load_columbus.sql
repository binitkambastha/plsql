WHENEVER OSERROR EXIT 1 ROLLBACK
WHENEVER SQLERROR EXIT 100 ROLLBACK


--select * from xxxxxxxxx;

INSERT into WK_BATCH_TRACKER
(RUN_NO, STEP_NAME, START_TIME, END_TIME, RUN_STATUS, ACTIVE_FLAG)
values (to_char(sysdate,'YYYYMMDD'),'RDS PAYMENT',systimestamp,NULL,'R','Y');
COMMIT;


TRUNCATE TABLE  stg_rds_payment_tbl reuse storage;

PROMPT "RDS PAYMENT: Insert into stg_rds_payment_tbl"

INSERT INTO stg_rds_payment_tbl
      (
        PAY_TICKET_NUMBER,
        PAY_TYPE,
        PAY_DEPOSIT_DATE,
        PAY_PROCESS_TIME,
        PAY_AMOUNT,
        PAY_METHOD,
        PAY_AGENCY,
        PAY_PHONE_IND,
        PAY_CLERK,
        PAY_PROCESS_DATE,
        PAY_BATCH_NUM,
        PAY_NOTICE_TYPE,
        PAY_ACCOUNT_CODE,
        PAY_REFUND_CHECK_NO,
        PAY_LAST_NOTICE_TYPE,
        PAY_LAST_NOTICE_DATE,
        PAY_TIMS_DATE_TIME,
        PAY_RDS_DATE_TIME
      )
select TICKET_NUMBER,PAYMENT_TYPE,BATCH_DATE,BATCH_TIME,PAY_AMOUNT,PAY_METHOD,agency,pay_phone_ind,
      CLERK_ID,PAY_PROCESS_DTE,PAY_BATCH_NUM,PAY_NOTICE_NUM,ACCOUNT_NUMBER,REFUND_CHECK_NO,
      NOTICE_TYPE,NOTICE_DATE,tims_timestamp,SYSTIMESTAMP
from (select RANK () over (partition by  TICKET_NUMBER,BATCH_DATE,BATCH_TIME 
	order by BATCH_DATE desc, etl_seq_cd DESC) as rec_no,TICKET_NUMBER,PAYMENT_TYPE,BATCH_DATE,BATCH_TIME,PAY_AMOUNT,PAY_METHOD,agency,pay_phone_ind,
      CLERK_ID,PAY_PROCESS_DTE,PAY_BATCH_NUM,PAY_NOTICE_NUM,ACCOUNT_NUMBER,REFUND_CHECK_NO,
      NOTICE_TYPE,NOTICE_DATE,tims_timestamp,SYSTIMESTAMP from
(SELECT TICKET_NUMBER,
      PAYMENT_TYPE,
      CASE WHEN NVL(BATCH_DATE,0) = 0 OR BATCH_DATE = 9999999 THEN  TO_DATE('1900001','YYYYDDD') ELSE TO_DATE(9999999- BATCH_DATE,'YYYYDDD') END Batch_Date,
      24000 -BATCH_TIME BATCH_TIME,
      PAY_AMOUNT,
      PAY_METHOD,
      '?' agency,
      pay_phone_ind,
      CLERK_ID,
      CASE WHEN NVL(PAY_PROCESS_DTE,0) = 0 OR PAY_PROCESS_DTE = 9999999 THEN TO_DATE('1900001','YYYYDDD') ELSE TO_DATE(PAY_PROCESS_DTE,'YYYYDDD') END PAY_PROCESS_DTE,
      PAY_BATCH_NUM,
      PAY_NOTICE_num,
      ACCOUNT_NUMBER,
      REFUND_CHECK_NO,
      NOTICE_TYPE,
      CASE WHEN NVL(NOTICE_DATE,0) = 0 OR NOTICE_DATE = 9999999 THEN TO_DATE('1900001','YYYYDDD') ELSE TO_DATE(NOTICE_DATE,'YYYYDDD') END NOTICE_DATE,
      tims_timestamp,
      SYSTIMESTAMP,
      etl_seq_cd
    FROM todays_tm2_ticket_hist
    WHERE TICKET_NUMBER > '0' 
     and BATCH_DATE           > '0' 
     and BATCH_TIME           > 0 
     and TRANS_CODE      like '04_'
     AND OP_STATUS      IN ( 'INSERT', 'UPDATE', 'SQL COMPUPDATE','PK UPDATE')
     union 
    SELECT TICK_NUMBER,
      PAYMENT_TYPE,
      CASE WHEN NVL(DEPOSIT_DATE,0) = 0 OR DEPOSIT_DATE = 9999999 THEN  TO_DATE('1900001','YYYYDDD') ELSE TO_DATE( DEPOSIT_DATE,'YYYYDDD') END DEPOSIT_DATE,
      PAY_PROCESS_TIME,
      PAYMENT_AMOUNT,
      PAYMENT_METHOD,
      PAYMENT_AGENCY,
      '?' phone_ind,
      PAYMENT_CLERK,
      CASE WHEN NVL(PAY_PROCESS_DTE,0) = 0 OR PAY_PROCESS_DTE = 9999999 THEN TO_DATE('1900001','YYYYDDD') ELSE TO_DATE(PAY_PROCESS_DTE,'YYYYDDD') END PAY_PROCESS_DTE,
      PAY_BATCH_NUM,
      PAY_NOTICE_TYPE,
      ACCOUNT_NUMBER,
      REFUND_CHECK_NO,
      CASE
        WHEN NOTICE_TYPE_1  > 0
        AND ( NOTICE_DATE_1 < deposit_date
        AND NOTICE_DATE_1   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN NOTICE_TYPE_1
        WHEN NOTICE_TYPE_2  > 0
        AND ( NOTICE_DATE_2 < deposit_date
        AND NOTICE_DATE_2   > GREATEST( NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN NOTICE_TYPE_2
        WHEN NOTICE_TYPE_3  > 0
        AND ( NOTICE_DATE_3 < deposit_date
        AND NOTICE_DATE_3   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN NOTICE_TYPE_3
        WHEN NOTICE_TYPE_4  > 0
        AND ( NOTICE_DATE_4 < deposit_date
        AND NOTICE_DATE_4   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN NOTICE_TYPE_4
        WHEN NOTICE_TYPE_5  > 0
        AND ( NOTICE_DATE_5 < deposit_date
        AND NOTICE_DATE_5   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_1,1950001) ) )
        THEN NOTICE_TYPE_5
      END LastNotType,
      CASE
        WHEN NOTICE_TYPE_1  > 0
        AND ( NOTICE_DATE_1 < deposit_date
        AND NOTICE_DATE_1   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN TO_DATE(NOTICE_DATE_1,'YYYYDDD')
        WHEN NOTICE_TYPE_2  > 0
        AND ( NOTICE_DATE_2 < deposit_date
        AND NOTICE_DATE_2   > GREATEST( NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN TO_DATE(NOTICE_DATE_2,'YYYYDDD')
        WHEN NOTICE_TYPE_3  > 0
        AND ( NOTICE_DATE_3 < deposit_date
        AND NOTICE_DATE_3   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN TO_DATE(NOTICE_DATE_3,'YYYYDDD')
        WHEN NOTICE_TYPE_4  > 0
        AND ( NOTICE_DATE_4 < deposit_date
        AND NOTICE_DATE_4   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_1,1950001), NVL(NOTICE_DATE_5,1950001) ) )
        THEN TO_DATE(NOTICE_DATE_4,'YYYYDDD')
        WHEN NOTICE_TYPE_5  > 0
        AND ( NOTICE_DATE_5 < deposit_date
        AND NOTICE_DATE_5   > GREATEST( NVL(NOTICE_DATE_2,1950001), NVL(NOTICE_DATE_3,1950001), NVL(NOTICE_DATE_4,1950001), NVL(NOTICE_DATE_1,1950001) ) )
        THEN TO_DATE(NOTICE_DATE_5,'YYYYDDD')
      END LastNotDt,
      tims_timestamp, 
      SYSTIMESTAMP,
      etl_seq_cd
    FROM todays_catchup_tick_segment2 
    WHERE TICK_NUMBER > '0' 
      and PAY_PROCESS_TIME > 0 
      and DEPOSIT_DATE > '0' and 
   OP_STATUS IN ( 'INSERT', 'UPDATE', 'SQL COMPUPDATE','PK UPDATE'))
   ) where rec_no = 1 ;

COMMIT;

PROMPT "Delete-Insert rds_payment_tbl"

delete from rds_payment_tbl where ( PAY_TICKET_NUMBER,PAY_DEPOSIT_DATE,PAY_PROCESS_TIME) IN 
( select PAY_TICKET_NUMBER,PAY_DEPOSIT_DATE,PAY_PROCESS_TIME from stg_rds_payment_tbl );

insert into rds_payment_tbl
      ( PAY_TICKET_NUMBER,
        PAY_TYPE,
        PAY_DEPOSIT_DATE,
        PAY_PROCESS_TIME,
        PAY_AMOUNT,
        PAY_METHOD,
        PAY_AGENCY,
        PAY_PHONE_IND,
        PAY_CLERK,
        PAY_PROCESS_DATE,
        PAY_BATCH_NUM,
        PAY_NOTICE_TYPE,
        PAY_ACCOUNT_CODE,
        PAY_REFUND_CHECK_NO,
        PAY_LAST_NOTICE_TYPE,
        PAY_LAST_NOTICE_DATE,
        PAY_TIMS_DATE_TIME,
        PAY_RDS_DATE_TIME )
select  PAY_TICKET_NUMBER,
        PAY_TYPE,
        PAY_DEPOSIT_DATE,
        PAY_PROCESS_TIME,
        PAY_AMOUNT,
        PAY_METHOD,
        PAY_AGENCY,
        PAY_PHONE_IND,
        PAY_CLERK,
        PAY_PROCESS_DATE,
        PAY_BATCH_NUM,
        PAY_NOTICE_TYPE,
        PAY_ACCOUNT_CODE,
        PAY_REFUND_CHECK_NO,
        PAY_LAST_NOTICE_TYPE,
        PAY_LAST_NOTICE_DATE,
        PAY_TIMS_DATE_TIME,
        PAY_RDS_DATE_TIME from stg_rds_payment_tbl;

COMMIT;

PROMPT "Update status steps.."

UPDATE todays_catchup_tick_segment2 SET ETL_STATUS_CD = 17
WHERE ETL_STATUS_CD = 16;
COMMIT;

PROMPT "Update Tick Hist.."
UPDATE todays_tm2_ticket_hist SET ETL_STATUS_CD = 20
WHERE ETL_STATUS_CD = 15 and trans_code LIKE '04_' AND TICKET_NUMBER > '0' AND pay_amount > '0' AND NVL(pay_process_dte, 0) <> 0;
COMMIT;

PROMPT "Update Tick Hist at source.."
UPDATE stg_columbus_dtl.TM2_TICKET_HISTORY@stg_dblink SET ETL_STATUS_CD = 20
WHERE ETL_STATUS_CD = 15 and trans_code LIKE '04_' AND TICKET_NUMBER > '0' AND pay_amount > '0' AND NVL(pay_process_dte, 0) <> 0;
COMMIT;

PROMPT "Update Tick Segment at source.."
UPDATE stg_columbus_dtl.TICK_SEGMENT@stg_dblink SET ETL_STATUS_CD = 35
WHERE ETL_STATUS_CD = 15 and tick_number in (select pay_ticket_number from stg_rds_payment_tbl);
COMMIT;

update WK_BATCH_TRACKER set end_time=systimestamp, run_status='Y' where STEP_NAME='RDS PAYMENT';
COMMIT;

EXIT;

