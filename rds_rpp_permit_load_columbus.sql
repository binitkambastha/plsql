
WHENEVER OSERROR EXIT 1 ROLLBACK
WHENEVER SQLERROR EXIT 100 ROLLBACK

INSERT into WK_BATCH_TRACKER
(RUN_NO, STEP_NAME, START_TIME, END_TIME, RUN_STATUS, ACTIVE_FLAG)
values (to_char(sysdate,'YYYYMMDD'),'RDS RPP PERMIT',systimestamp,NULL,'R','Y');
COMMIT;

truncate table stg_permit_tmp_tbl;

PROMPT "RDS RPP_PERMIT: Insert into stg_PERMIT_TMP_TBL"

INSERT INTO stg_permit_tmp_tbl
(ISN, PERMIT_NUMBER, OP_STATUS, TIMS_TIMESTAMP, ETL_SEQ_CD, Source_ROWID)
SELECT S.ISN, S.PERMIT_NUMBER, S.OP_STATUS, S.TIMS_TIMESTAMP, S.ETL_SEQ_CD,  S.Source_ROWID
FROM ( SELECT RANK() OVER (PARTITION BY S.PERMIT_NUMBER
ORDER BY S.PERMIT_NUMBER, S.ISN, S.etl_status_cd, S.ETL_SEQ_CD DESC, S.TIMS_TIMESTAMP DESC) rec_num,
S.PERMIT_NUMBER, S.ISN, S.OP_STATUS, S.etl_status_cd, S.TIMS_TIMESTAMP, S.ETL_SEQ_CD, S.ROWID AS Source_ROWID
FROM stg_columbus_dtl.TM2_RPP_MASTER@stg_dblink S
WHERE LENGTH(TRIM(S.PERMIT_NUMBER)) > 0 AND S.etl_status_cd IN (10,20)
    AND s.tims_timestamp >= (select last_run_date from cfg_batch_run)
   AND s.tims_timestamp < (select last_run_date + days_to_run from cfg_batch_run)
AND S.OP_STATUS IN ( 'INSERT', 'DELETE', 'UPDATE', 'SQL COMPUPDATE')
) S WHERE REC_NUM = 1;

commit;

ROMPT "Delete-Insert RDS_RPP_PERMIT_TBL"

DELETE FROM RDS_RPP_PERMIT_TBL D
WHERE EXISTS ( SELECT 1 FROM stg_permit_tmp_tbl T WHERE D.PERMIT_NUMBER = T.PERMIT_NUMBER);

INSERT INTO RDS_RPP_PERMIT_TBL
(   PERMIT_NUMBER, PERMIT_ACCOUNT, PERMIT_TYPE, PERMIT_ISSUE_REASON,
PERMIT_ISSUE_DATE, PERMIT_EFFECTIVE_DATE, PERMIT_EXPIRE_DATE, PERMIT_QUANTITY_ISSUED,
PERMIT_AMOUNT_PAID, PERMIT_PAYMENT_METHOD, PERMIT_DEPOSIT_DATE, PERMIT_DEPOSIT_BATCH_NUM,
PERMIT_PAYMENT_DUE, PERMIT_STATUS, PERMIT_CANCEL_CODE, PERMIT_LAST_NAME,
PERMIT_FIRST_NAME, PERMIT_PLATE_STATE, PERMIT_STATE_PLATE, PERMIT_PLATE_TYPE,
PERMIT_EMAIL_ADDRESS, PERMIT_PLATE_COLOR, PERMIT_VEHICLE, PERMIT_VEHICLE_YEAR,
PERMIT_STATE_DRIVER_LIC, PERMIT_PHONE_NUMBER, PERMIT_CLERK_ID, PERMIT_CANCEL_CLERK_ID,
PERMIT_CANCEL_DATE, PERMIT_NOTICE_DATE, PERMIT_ADJ_CLERK_ID, PERMIT_ADJ_DATE,
PERMIT_ADJ_AMOUNT, PERMIT_ADJ_REASON, PERMIT_MAIL_TO_IND, PERMIT_CLIENT_FLAG,
PERMIT_HIST_IND, PERMIT_GARAGED_IND, PERMIT_REQUEST_SOURCE, PERMIT_NUM_FILL1,
PERMIT_NUM_FILL2, PERMIT_IMAGE_IND, PERMIT_ALF_FILL2, PERMIT_CORR_TYPE,
PERMIT_CORR_DATE, PERMIT_CORR_TIME, PERMIT_CORR_CLERK, PERMIT_CORR_LAST_NAME,
PERMIT_CORR_FIRST_NAME, PERMIT_CORR_INTERACT, PERMIT_CORR_NUM_FILL1, PERMIT_CORR_NUM_FILL2,
PERMIT_CORR_ALF_FILL1, PERMIT_CORR_ALF_FILL2, PERMIT_CORR_ADDR1, PERMIT_CORR_ADDR2,
PERMIT_CORR_CITY, PERMIT_CORR_STATE, PERMIT_CORR_ZIP, PERMIT_CORR_ADDR_FILL1,
PERMIT_CORR_ADDR_FILL2, PERMIT_CORR_ADDR_FILL3, PERMIT_CORR_ADDR_FILL4, PERMIT_EXTRA_COMMENTS,
PERMIT_EXTRA_A_FILL1, PERMIT_EXTRA_A_FILL2, PERMIT_EXTRA_N_FILL1, PERMIT_EXTRA_N_FILL2,
permit_tims_date_time, permit_rds_date_time )
SELECT
s.PERMIT_NUMBER, s.pERMIT_ACCOUNT, s.pERMIT_TYPE, s.pERMIT_ISSUE_REASON,
TO_DATE(CASE WHEN S.PERMIT_ISSUE_DATE IN (0,99999999) THEN 19501231 ELSE  S.PERMIT_ISSUE_DATE END,'YYYYMMDD') AS PERMIT_ISSUE_DATE,
TO_DATE(CASE WHEN S.PERMIT_INV_EFF_DATE  IN (0,99999999) THEN 19501231 ELSE 99999999- S.PERMIT_INV_EFF_DATE  END,'YYYYMMDD') AS PERMIT_EFFECTIVE_DATE,
TO_DATE(CASE WHEN S.PERMIT_EXPIRE_DATE  IN (0,99999999) THEN 19501231 ELSE  S.PERMIT_EXPIRE_DATE  END,'YYYYMMDD') AS PERMIT_EXPIRE_DATE,
PERMIT_QUANTITY_ISSUED,
PERMIT_AMOUNT_PAID, s.pERMIT_PAYMENT_METHOD,
TO_DATE(CASE WHEN S.PERMIT_DEPOSIT_DATE  IN (0,99999999) THEN 19501231 ELSE  S.PERMIT_DEPOSIT_DATE  END,'YYYYMMDD') AS PERMIT_DEPOSIT_DATE,
PERMIT_DEPOSIT_BATCH_NUM,
PERMIT_PAYMENT_DUE, s.pERMIT_STATUS, s.pERMIT_CANCEL_CODE, s.pERMIT_LAST_NAME,
PERMIT_FIRST_NAME, s.pERMIT_STATE AS PERMIT_PLATE_STATE/*(1:2)*/, s.pERMIT_PLATE AS PERMIT_STATE_PLATE, /*(3:8)*/ PERMIT_PLATE_TYPE AS PERMIT_PLATE_TYPE/*(11:2)*/,
PERMIT_EMAIL_ADDRESS, s.pERMIT_PLATE_COLOR, s.pERMIT_VEHICLE, s.pERMIT_VEHICLE_YEAR,
PERMIT_STATE_DRIVER_LIC, s.pERMIT_PHONE_NUMBER, s.pERMIT_CLERK_ID, s.pERMIT_CANCEL_CLERK_ID,
TO_DATE(CASE WHEN S.PERMIT_CANCEL_DATE  IN (0,99999999) THEN 19501231 ELSE S.PERMIT_CANCEL_DATE  END,'YYYYMMDD') AS PERMIT_CANCEL_DATE,
TO_DATE(CASE WHEN S.PERMIT_NOTICE_DATE  IN (0,99999999) THEN 19501231 ELSE S.PERMIT_NOTICE_DATE  END,'YYYYMMDD') AS PERMIT_NOTICE_DATE,
PERMIT_ADJ_CLERK_ID,
TO_DATE(CASE WHEN S.PERMIT_ADJ_DATE  IN (0,99999999) THEN 19501231 ELSE  S.PERMIT_ADJ_DATE  END,'YYYYMMDD') AS PERMIT_ADJ_DATE,
PERMIT_ADJ_AMOUNT, s.pERMIT_ADJ_REASON, s.pERMIT_MAIL_TO_IND, s.pERMIT_CLIENT_FLAG,
PERMIT_HIST_IND, s.pERMIT_GARAGED_IND, s.pERMIT_REQUEST_SOURCE, s.pERMIT_RESIDENCY AS PERMIT_NUM_FILL1,
PERMIT_NUM_FILL2, s.pERMIT_IMAGE_IND, s.pERMIT_ALF_FILL2, s.pERMIT_CORR_TYPE,
TO_DATE(CASE WHEN S.PERMIT_CORR_DATE  IN (0,9999999) THEN 1950365 ELSE S.PERMIT_CORR_DATE  END,'YYYYDDD') AS PERMIT_CORR_DATE,
PERMIT_CORR_TIME, s.pERMIT_CORR_CLERK, s.pERMIT_CORR_LAST_NAME,
PERMIT_CORR_FIRST_NAME, s.pERMIT_CORR_INTERACT, s.pERMIT_CORR_NUM_FILL1, s.pERMIT_CORR_NUM_FILL2,
PERMIT_CORR_ALF_FILL1, s.pERMIT_CORR_ALF_FILL2, s.pERMIT_CORR_ADDR1, s.pERMIT_CORR_ADDR2,
PERMIT_CORR_CITY, s.pERMIT_CORR_STATE, s.pERMIT_CORR_ZIP, s.pERMIT_CORR_ADDR_FILL1,
PERMIT_CORR_ADDR_FILL2, s.pERMIT_CORR_ADDR_FILL3, s.pERMIT_CORR_ADDR_FILL4, s.pERMIT_EXTRA_COMMENTS,
PERMIT_EXTRA_A_FILL1, s.pERMIT_EXTRA_A_FILL2, s.pERMIT_EXTRA_N_FILL1, s.pERMIT_EXTRA_N_FILL2,
t.tims_timestamp, systimestamp
FROM stg_columbus_dtl.TM2_RPP_MASTER@stg_dblink S JOIN stg_permit_tmp_tbl T
ON S.ROWID = T.SOURCE_ROWID
AND s.tims_timestamp >= (select last_run_date from cfg_batch_run)
AND s.tims_timestamp < (select last_run_date + days_to_run from cfg_batch_run);

COMMIT;

PROMPT "Update status at source.."

UPDATE stg_columbus_dtl.TM2_RPP_MASTER@stg_dblink S
SET ETL_STATUS_CD = 20
WHERE EXISTS (SELECT 1      FROM stg_permit_tmp_tbl T
      WHERE S.PERMIT_NUMBER = T.PERMIT_NUMBER      )
AND tims_timestamp >= (select last_run_date from cfg_batch_run)
AND tims_timestamp < (select last_run_date + days_to_run from cfg_batch_run);

COMMIT;

select count(1), count(distinct RPP_ACCOUNT) from stg_columbus.TM2_RPP_MASTER@stg_dblink
where RPP_ACCOUNT > 0
   AND tims_timestamp >= (select last_run_date from cfg_batch_run)
   AND tims_timestamp < (select last_run_date + days_to_run from cfg_batch_run);


select count(1) from RDS_RPP_ACCOUNT_TBL where rpp_rds_update_date > trunc(sysdate);


--**VALIDATIONS - the below 2 table counts should match
select count(1) from stg_permit_tmp_tbl 
   WHERE tims_timestamp >= (select last_run_date from cfg_batch_run)
   AND tims_timestamp < (select last_run_date + days_to_run from cfg_batch_run);

select count(1) from RDS_RPP_PERMIT_TBL where permit_rds_date_time > trunc(sysdate);

update WK_BATCH_TRACKER set end_time=systimestamp, run_status='Y' where STEP_NAME='RDS RPP PERMIT';
COMMIT;


EXIT;

